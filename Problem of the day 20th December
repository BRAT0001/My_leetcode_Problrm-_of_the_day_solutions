// 20th December Leetcode Problemn of the day\
// Solution in cpp language

class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        if (!root) return nullptr;
        
        queue<TreeNode*> q;
        q.push(root);
        int level = 0;
        
        while (!q.empty()) {
            int size = q.size();
            vector<TreeNode*> currentLevelNodes;
            
            for (int i = 0; i < size; ++i) {
                TreeNode* node = q.front();
                q.pop();
                
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
                
                currentLevelNodes.push_back(node);
            }
            
            if (level % 2 == 1) {
                int left = 0, right = currentLevelNodes.size() - 1;
                while (left < right) {
                    swap(currentLevelNodes[left]->val, currentLevelNodes[right]->val);
                    ++left;
                    --right;
                }
            }
            
            ++level;
        }
        
        return root;
    }
};

TreeNode* createTreeNode(int val) {
    return new TreeNode(val);
}

void inorderTraversal(TreeNode* root) {
    if (!root) return;
    inorderTraversal(root->left);
    printf("%d ", root->val);
    inorderTraversal(root->right);
}


